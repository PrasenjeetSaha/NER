import pandas as pd
from datetime import datetime, timedelta

# Load the data from the Excel file
df = pd.read_excel("mock data.xlsx")

def get_payment_status(company_id=None, transaction_id=None):
    # Define the base SQL query
    if company_id:
        query = f"SELECT company_id, transaction_id, status FROM df WHERE company_id = {company_id}"
    elif transaction_id:
        query = f"SELECT company_id, transaction_id, status FROM df WHERE transaction_id = {transaction_id}"
    else:
        return "Please provide either company_id or transaction_id."

    # Execute the query
    result = pd.read_sql_query(query, con=None)

    return result

def get_payment_history(company_id, date1=None, date2=None, last_months=None):
    if date1 and date2:
        # Use the provided date range
        date1 = datetime.strptime(date1, '%Y-%m-%d')
        date2 = datetime.strptime(date2, '%Y-%m-%d')
    elif last_months:
        # Calculate date1 and date2 based on last_months input
        date2 = datetime.today()
        date1 = date2 - timedelta(days=int(last_months)*30)
    else:
        return "Please provide either date1 and date2 or the last_months input."

    # Define the base SQL query
    query = f"SELECT company_id, transaction_id, date, transaction_amount FROM df WHERE company_id={company_id} AND date BETWEEN '{date1}' AND '{date2}'"

    # Execute the query
    result = pd.read_sql_query(query, con=None)

    return result


# Example usage for Payment Status
payment_status_result = get_payment_status(company_id=1234)
print(payment_status_result)

# Example usage for Payment History with date range
payment_history_result1 = get_payment_history(company_id=5678, date1='2023-01-01', date2='2023-06-30')
print(payment_history_result1)

# Example usage for Payment History with last months
payment_history_result2 = get_payment_history(company_id=5678, last_months=3)
print(payment_history_result2)





def get_payment_history(company_id, date1=None, date2=None, last_months=None):
    if date1 and date2:
        date1 = datetime.strptime(date1, '%Y-%m-%d')
        date2 = datetime.strptime(date2, '%Y-%m-%d')
    elif last_months:
        date2 = datetime.today()
        date1 = date2 - timedelta(days=int(last_months)*30)
    else:
        query = f"SELECT company_id, transaction_id, strftime('%m/%d/%y', date) as date, transaction_amount FROM df WHERE company_id={company_id} AND date BETWEEN COALESCE('{date1}', date) AND COALESCE('{date2}', date)"
        result = sqldf(query)
        return result

    # Format date1 and date2 to match the date format in the DataFrame
    date1_str = date1.strftime('%Y-%m-%d')
    date2_str = date2.strftime('%Y-%m-%d')

    query = f"SELECT company_id, transaction_id, strftime('%m/%d/%y', date) as date, transaction_amount FROM df WHERE company_id={company_id} AND date BETWEEN '{date1_str}' AND '{date2_str}'"
    result = sqldf(query)
    return result



def format_result(result_df):
    if result_df.empty:
        return "Here is what I found:\nNo data found."

    # Format the DataFrame as a table using tabulate
    table_str = tabulate(result_df, headers='keys', tablefmt='grid', showindex=False)

    # Add header message
    header = "Here is what I found:\n"
    return header + table_str


import re
from fuzzywuzzy import fuzz

# Single regex pattern for identifying payment-related phrases
payment_pattern = r'(payment\s*status|check\s*status\s*of\s*payment|payment\s*result)'

# Input text to search for payment-related phrases
input_text = "I want to check the status of my payment. Can you provide me the payment result?"

# Function to perform fuzzy matching on the regex pattern
def fuzzy_match(regex_pattern, input_text):
    matches = []
    match = re.search(regex_pattern, input_text, re.IGNORECASE)
    if match:
        matches.append((regex_pattern, match.group(0)))
    
    # Sort matches based on fuzzy match score
    matches.sort(key=lambda x: fuzz.ratio(x[1], input_text), reverse=True)
    return matches

# Perform fuzzy matching on the input text using the single regex pattern
result = fuzzy_match(payment_pattern, input_text)

# Print the matched phrases and their fuzzy match scores
for pattern, match in result:
    fuzzy_score = fuzz.ratio(match, input_text)
    print(f"Pattern: '{pattern}', Matched Text: '{match}', Fuzzy Match Score: {fuzzy_score}")




import spacy

def extract_info_with_spacy(input_text):
    nlp = spacy.load("en_core_web_sm")

    doc = nlp(input_text)

    # Initialize variables to store extracted information
    client_id = None
    transaction_id = None
    date1 = None
    date2 = None
    term = None

    # Extract client ID, transaction ID, and dates from the parsed doc
    for ent in doc.ents:
        if ent.label_ == 'CARDINAL':
            # Assuming CARDINAL entities represent client IDs and transaction IDs
            if len(ent.text) <= 11:
                context = input_text[max(0, ent.start_char - 15):min(len(input_text), ent.end_char + 15)].lower()
                if 'client' in context or 'client id' in context:
                    client_id = ent.text
            elif '-' in ent.text and ent.text.count('-') == 2:
                context = input_text[max(0, ent.start_char - 15):min(len(input_text), ent.end_char + 15)].lower()
                if 'transaction' in context or 'transaction id' in context:
                    transaction_id = ent.text

        if ent.label_ == 'DATE':
            # Assuming DATE entities represent dates
            if not date1:
                date1 = ent.text
            else:
                date2 = ent.text

    # Extract term if there is a numerical quantity followed by a time period
    for token in doc:
        if token.like_num and token.idx + len(token.text) < len(input_text):
            next_token = doc[token.i + 1]
            if next_token.text.lower() in {'day', 'days', 'week', 'weeks', 'month', 'months', 'year', 'years'}:
                term = token.text
                break

    return client_id, transaction_id, date1, date2, term

# Test the function with example inputs
inputs = [
    "i need to know the payment status for client 12345678910",
    "show me the payment history for client 93216956291",
    "what are all the transactions for client with id 10386392619 since March this year",
    "i want the transactions done by client 94017382949 from 2/11/2022 to 3/6/2023",
    "what is the transaction status for transaction number 1920-19379-96339",
]

for input_text in inputs:
    client_id, transaction_id, date1, date2, term = extract_info_with_spacy(input_text)
    print("Input Text:", input_text)
    print("Client ID:", client_id)
    print("Transaction ID:", transaction_id)
    print("Date1:", date1)
    print("Date2:", date2)
    print("Term:", term)
    print("=" * 50)
